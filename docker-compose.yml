# Use the file format compatible with Docker Compose 3.8
version: "3.8"

services:

  database:
    # Use the postgres 11.5 base image for this container.
    image: postgres:11.5

    volumes:
      - db_data:/var/lib/postgresql/data

      # This copies our init.sql into our container, to
      # a special file called
      # /docker-entrypoint-initdb.d/init.sql. Anything
      # at this location will get executed one per
      # container, i.e. it will get executed the first
      # time the container is created but not again.
      #
      # The init.sql file is a one-line that creates a
      # user called (arbitrarily) boats_development.
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
  
  redis:
    image: redis
  
  web:
    # The root directory from which we're building.
    build: .

    # This makes it so any code changes inside the project
    # directory get synced with Docker. Without this line,
    # we'd have to restart the container every time we
    # changed a file.
    volumes:
      - .:/code:cached

    # The command to be run when we run "docker-compose up".
    command: bash -c "rm -f tmp/pids/server.pid && bundle exec rails s -p 3002 -b '0.0.0.0'"

    # Expose port 3002.
    ports:
      - "3002:3002"

    # Specify that this container depends on the other
    # container which we've called "database".
    depends_on: [database, redis]

    # Specify the values of the environment variables
    # used in this container.
    environment:
      REDIS_URL: redis://redis:6379
      RAILS_ENV: development
      DATABASE_NAME: boats_development
      DATABASE_USER: boats_development
      DATABASE_PASSWORD: 
      DATABASE_HOST: database

# Declare the volumes that our application uses.
volumes:
  db_data: